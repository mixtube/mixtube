@import '../vendor/bourbon/bourbon';
@import 'variables';
@import 'utils';

@mixin search {

  .mt-search {
    @include position(absolute, 0px 0px 0px 0px);

    background-color: rgba($color-lighter, .8);
    overflow-x: hidden;
    overflow-y: auto;
    -webkit-overflow-scrolling: touch;
  }

  .mt-search__provider__header {
    padding: 0 $grid-size;
    margin: 2 * $grid-size 0;

    display: flex;
    align-items: center;
  }

  .mt-search__provider__header__spinner {
    display: inline-block;
    height: 2 * $grid-size;
    width: 2 * $grid-size;
    margin-left: $grid-size;
  }

  .mt-search__message {
    padding: 0 $grid-size;
  }

  .mt-search__message__padding {
    padding-bottom: 2 * $grid-size;
  }

  .mt-results {
    padding-left: $grid-size;
  }

  // we fill the content of an hidden element with the layout information
  // it will be read on the JS side to query the proper amount of items
  .mt-js-results:before {
    display: none;
    content: '{"promotedCount": 1, "regularCount": 1}';
  }

  .mt-result {
    float: left;
    margin-bottom: $grid-size;
    padding-right: $grid-size;
    vertical-align: top;

    width: 100%;
  }

  .mt-result__container {
    position: relative;
    margin: 0 auto;

    text-align: inherit;
  }

  // helper to set the media queries breakpoints to have a nice results grid
  // ideally we would have element query on the result panel but it doesn't exist yet so we need to "statically"
  // calculate the remaining space
  @mixin mt-result-breakpoint($promoted-count, $regular-count, $width-offset) {

    // the idea is to make sure we never expand the gutter between the promoted result
    $width-breakpoint: $width-offset + $promoted-count * $grid-size + ($promoted-count - 1) * $width-thumbnail-original;

    @media screen and (min-width: max($width-breakpoint, $width-breakpoint-single-column-layout)) {

      .mt-js-results:before {
        content: '{"promotedCount": #{$promoted-count}, "regularCount": #{$regular-count}}';
      }

      .mt-result {
        width: 100% / $regular-count;
      }

      .mt-result__container {
        max-width: $width-thumbnail-original;
      }

      .mt-result__thumbnail {
        height: $height-thumbnail-original;
        padding-top: 0; // stops the fluid height behavior of the thumbnail
      }

      // the first three children of the first page are "promoted"
      .mt-results__page:first-child .mt-result:nth-child(-n + #{$promoted-count}) {
        width: 100% /  $promoted-count;
      }
    }
  }

  @include mt-result-breakpoint(1, 1, $width-queue-tile);
  @include mt-result-breakpoint(2, 3, $width-queue-tile);
  @include mt-result-breakpoint(3, 4, $width-queue-tile);
  @include mt-result-breakpoint(4, 6, $width-queue-tile);
  @include mt-result-breakpoint(5, 7, $width-queue-tile);

  .mt-result__thumbnail {
    position: relative;

    padding-top: $ratio-thumbnail;

    background-color: $color-primary;

    // text protection
    &:after {
      content: '';
      display: block;
      @include position(absolute, $height-thumbnail-original / 4 0px 0px 0px);

      background: linear-gradient(to bottom, hsla(0, 0%, 0%, 0) 0%, hsla(0, 0%, 0%, 0.7) 70%, hsla(0, 0%, 0%, 0.7) 100%);
    }
  }

  .mt-result__thumbnail__img {

    @include position(absolute, 0px 0px 0px 0px);

    .mt-smart-img__image {
      filter: saturate(100%);

      &.mt-loading {
        opacity: 0;
        filter: saturate(0);
      }

      &.mt-loading-remove {
        transition-property: opacity, filter;
        transition-duration: $transition-duration * 5, $transition-duration * 10;
      }
    }

    .loading-indicator {
      height: 100%;
      display: flex;
      align-items: center;
      justify-content: center;
      color: $color-text-secondary;
    }
  }

  .mt-result__added-confirmation {
    position: absolute;
    top: 0;
    bottom: 0;
    width: 100%;
    z-index: 2;
    transform: translate3d(0, 0, 0); // u e 3D here to avoid animation flickering in webkit

    background-color: $color-primary;

    // vertically center the text
    display: flex;
    flex-direction: column;
    justify-content: center;

    > .text {
      padding: $grid-size;
      text-align: center;

      // a very "cheap" element query to display a shorter confirmation message on larger screen when the search result screen
      // is made of 5 columns which doesn't give much place to the message
      @include mt-horizontal-screen() {

        font: $font-smaller;

        &:before {
          content: attr(mt-short-text);
        }

        > .mt-replaced-text {
          display: none;
        }
      }
    }

    &.mt-result__added-confirmation__animation-if {

      &.ng-enter, &.ng-leave {
        transition-property: transform, opacity;
        transition-duration: $transition-duration;
        transition-timing-function: $timing-function-ease-in-out, linear;
      }

      &.ng-enter, &.ng-leave.ng-leave-active {
        transform: translate3d(-100%, 0, 0);
        opacity: .5;
      }

      &.ng-leave, &.ng-enter.ng-enter-active {
        transform: translate3d(0, 0, 0);
        opacity: 1;
      }
    }
  }

  .mt-result__data {
    position: absolute;
    bottom: 0;
    width: 100%;
    padding: 2 * $grid-size;

    //background: rgba($color-background, .3);
  }

  .mt-result__data__item {
    white-space: nowrap;
    text-overflow: ellipsis;

    &.head {
      display: flex;
      align-items: baseline;
    }
  }

  .mt-result__data__title {
    flex: 1;

    text-overflow: ellipsis;
    font: $font-smaller;
    font-weight: 600;
  }

  .mt-result__data__publisher {
    font: $font-smaller;
  }

  .mt-result__data__duration {
    width: 6ch; // based on the idea that the widest value would be 000:00
    font: $font-smaller;
    text-align: right;
  }

  .mt-search__show-more {
    padding: 0 $grid-size;
    margin-bottom: $grid-size;

    display: flex;

    @include mt-horizontal-screen() {
      justify-content: flex-end;
    }
  }

  .mt-search__show-more__button {
    width: 100%;
    background-color: $color-darker;
    text-align: center;
    padding: 0 $grid-size;
    line-height: 5 * $grid-size;

    border-radius: $border-radius;

    display: flex;
    justify-content: center;

    @include mt-horizontal-screen() {
      width: auto;
    }

    @media (any-hover: hover) {
      &:hover .text {
        color: $color-accent;
      }
    }
  }

  .mt-search__show-more__button__label {
    overflow: visible;
    padding: 0 3 * $grid-size;

    display: flex;
    align-items: center;

    .loader {
      width: 0;
      overflow: visible;
    }
  }

  .mt-search__show-more__spinner {
    width: 2 * $grid-size;
    height: 2 * $grid-size;
    margin-left: $grid-size;
  }
}