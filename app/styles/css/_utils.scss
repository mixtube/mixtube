@import 'variables';

@mixin utils {

  mt-button {
    display: block;
  }

  [role=button] {
    cursor: pointer;
    outline: none;
    user-select: none;
    -webkit-tap-highlight-color: rgba(255, 255, 255, 0);
  }

  @keyframes mt-spinner-rotation {
    to {
      transform: rotate(1turn);
    }
  }

  mt-smart-img {
    display: block;
    position: relative;

    .mt-smart-img__image {
      background-repeat: no-repeat;
      background-position: center;
    }

    &.fill-crop .mt-smart-img__image {
      position: absolute;
      top: 0;
      bottom: 0;
      right: 0;
      left: 0;

      background-size: cover;
    }
  }

  .mt-smart-img__loading-indicator-container {
    position: absolute;
    width: 100%;
    top: 0;
    bottom: 0;
  }

  mt-spinner {
    display: block;
  }

  .mt-spinner__svg {
    display: block;

    fill: currentColor;

    animation: mt-spinner-rotation 500ms infinite linear;
  }

  //todo need to revisit this SVG thing
  .mt-svg-icon {
    display: inline-block;
    height: 4 * $grid-size;
    width: 4 * $grid-size;

    fill: currentColor;
    stroke: currentColor;
  }

  .mt-animation-enter-leave__fade {

    &.ng-enter, &.ng-leave {
      transition: opacity $transition-duration linear;
    }

    &.ng-enter,
    &.ng-leave.ng-leave-active {
      opacity: 0;
    }

    &.ng-leave,
    &.ng-enter.ng-enter-active {
      opacity: 1;
    }
  }
}

%mt-chromeless-input {
  appearance: none;
  border: none;
  background: transparent;
  outline: none;
}

@mixin mt-click-reaction {
  &.ng-click-active {
    transform: scale(.9);
  }
}

// extracted settings for placeholder so that we can simulate placeholders with regular element
@mixin mt-placeholder($color: #A9A9A9) {
  color: $color;
  text-overflow: clip;
  white-space: nowrap;
}

@mixin mt-horizontal-screen {
  @media screen and (min-width: $width-breakpoint-single-column-layout) {
    @content;
  }
}

// shadow generation
// copied and adapted from https://github.com/mrmlnc/material-shadows
@function z-depth-top($depth: 1) {
  $color:    .12, .19, .19, .21, .22;
  $offset-y: 2px, 6px, 17px, 25px, 40px;
  $blur:     10px, 20px, 50px, 55px, 77px;

  @return 0 nth($offset-y, $depth) nth($blur, $depth) rgba($color-shadow, nth($color, $depth));
}

@mixin z-depth-top($depth: 1) {
  box-shadow: z-depth-top($depth);
}

@function z-depth-bottom($depth: 1) {
  $color:    .16, .2, .24, .22, .2;
  $offset-y: 2px, 8px, 12px, 16px, 27px;
  $blur:     5px, 17px, 15px, 28px, 24px;

  @return 0 nth($offset-y, $depth) nth($blur, $depth) rgba($color-shadow, nth($color, $depth));
}

@mixin z-depth-bottom($depth: 1) {
  @if $depth == 0 {
    box-shadow: none;
  }
  @else {
    box-shadow: z-depth-bottom($depth);
  }
}

@mixin z-depth($depth: 1) {
  @if $depth == 0 {
    box-shadow: none;
  }
  @else {
    box-shadow: z-depth-bottom($depth), z-depth-top($depth);
  }
}